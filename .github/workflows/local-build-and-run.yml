name: Local Build and Run
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - main
jobs:
  # build and run
  build-and-run:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Install build dependencies (make and other essentials)
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential
        
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.0
          
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: "frontend/package.json"
          
      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
          
      - name: Build frontend
        run: make build-frontend
          
      # Set environment variables based on the selected environment
      - name: Set environment variables
        id: env-vars
        run: |
          DOCKER_IMAGE=filebrowser
          
          # Use environment input instead of tag for versioning
          if [[ "${{ github.event.inputs.environment }}" == "main" ]]; then
            ENV_TAG="prod"
          else
            ENV_TAG="${{ github.event.inputs.environment }}"
          fi
          
          # Set a timestamp-based version for better tracking
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          VERSION="${ENV_TAG}-${TIMESTAMP}"
          
          echo "IMAGE_NAME=${DOCKER_IMAGE}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_ENV
          echo "ENV_TAG=${ENV_TAG}" >> $GITHUB_ENV
      
      # Build Docker image manually instead of using the action
      - name: Build Docker image
        run: |
          # Build the Docker image with tag
          sudo docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          sudo docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:${{ env.ENV_TAG }}-latest
      
      - name: Stop and remove existing container
        run: |
          sudo docker stop filebrowser-${{ github.event.inputs.environment }} || true
          sudo docker rm filebrowser-${{ github.event.inputs.environment }} || true
      
      - name: Run Docker container locally
        run: |
          # Create config directory if it doesn't exist
          mkdir -p $(pwd)/config-${{ github.event.inputs.environment }}
          
          # Run the Docker container with environment-specific configuration
          sudo docker run -d \
            --name filebrowser-${{ github.event.inputs.environment }} \
            --user $(id -u):$(id -g) \
            -p 8080:8080 \
            -v /app/uploads-${{ github.event.inputs.environment }}:/data \
            -v $(pwd)/config-${{ github.event.inputs.environment }}:/config \
            -e FB_BASEURL=/filebrowser \
            -e ENVIRONMENT="${{ github.event.inputs.environment }}" \
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
          # Verify container is running
          sudo docker ps
          
          # Show container logs
          sudo docker logs filebrowser-${{ github.event.inputs.environment }}
